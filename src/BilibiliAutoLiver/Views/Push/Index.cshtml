@model PushIndexPageViewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "推流设置";
}

<div class="layui-row layui-col-space15" style="margin-bottom:50px">
    <div class="layui-col-md12">
        <div class="layui-card">
            <div class="layui-card-header layui-card-header-custum">
                简易模式
                <div class="layui-form layui-form-custum">
                    <input type="checkbox" name="easyModel" id="easyModel" lay-filter="easyModel" lay-skin="switch" lay-text="开启|关闭" @(Model.PushSetting.Model == ConfigModel.Normal ? "checked" : "")>
                </div>
            </div>
            <div class="layui-card-body" id="easyModelBody" style="@(Model.PushSetting.Model == ConfigModel.Normal ? "" : "display:none")">
                <div class="layui-tab layui-tab-brief" lay-filter="component-tabs-brief">
                    <ul class="layui-tab-title">
                        <li class="layui-this">基础设置</li>
                    </ul>
                    <div class="layui-tab-content">
                        <div class="layui-tab-item layui-show">
                            <div class="layui-form" lay-filter="base_output_params_form">
                                <div class="layui-form-item">
                                    <label class="layui-form-label">推流分辨率</label>
                                    <div class="layui-input-inline">
                                        <select id="outputResolution" name="outputResolution" lay-verify="required" lay-search>
                                            <option value="480x320">480×320</option>
                                            <option value="640x480">640×480</option>
                                            <option value="800x600">800×600</option>
                                            <option value="1280x720">1280×720</option>
                                            <option value="1366x768">1366×768</option>
                                            <option value="1440x900">1440×900</option>
                                            <option value="1920x1080">1920×1080</option>
                                            <option value="2560x1440">2560×1440</option>
                                            <option value="3840x2160">3840×2160</option>
                                            <option value="7680x4320">7680×4320</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="layui-form-item">
                                    <label class="layui-form-label">自定义输出参数</label>
                                    <div class="layui-input-inline">
                                        <textarea id="custumOutputParams" name="custumOutputParams" placeholder="自定义的ffmpeg输出参数。可为空，但是不能与下面配置项参数相同。最长不能超过512字符。" class="layui-textarea"></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="layui-tab layui-tab-brief" lay-filter="input_type_tab" id="input_type_tab">
                    <ul class="layui-tab-title">
                        <li  class="layui-this" lay-id="1">推流视频</li>
                        <li lay-id="2">推流桌面</li>
                        <li lay-id="3">推流摄像头</li>
                        <li lay-id="4">推流摄像头（高级）</li>
                    </ul>
                    <div class="layui-tab-content">
                        <div class="layui-tab-item layui-show">
                            <div class="layui-form" lay-filter="input_type_1">
                                <div class="layui-form-item">
                                    <label class="layui-form-label">推流视频<label style="color:red">*</label></label>
                                    <div class="layui-input-inline">
                                        <select id="videoId" name="videoId" lay-verify="required" lay-search>
                                            <option value="">请选择</option>
                                            @foreach (var item in Model.Videos)
                                            {
                                                <option value="@item.Key">@item.Value</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="layui-form-item">
                                    <label class="layui-form-label">视频是否静音</label>
                                    <div class="layui-input-inline">
                                        <input id="isMute" name="isMute" type="checkbox" lay-skin="switch" lay-text="是|否">
                                    </div>
                                </div>
                                <div class="layui-form-item">
                                    <label class="layui-form-label">推流音频</label>
                                    <div class="layui-input-inline">
                                        <select id="audioId" name="audioId" lay-search>
                                            <option value="">请选择</option>
                                            @foreach (var item in Model.Audios)
                                            {
                                                <option value="@item.Key">@item.Value</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="layui-tab-item">
                            <div class="layui-form" lay-filter="input_type_2">
                                <div class="layui-form-item">
                                    <label class="layui-form-label">屏幕范围<label style="color:red">*</label></label>
                                    <div class="layui-input-inline">
                                        <input type="text" id="inputScreen" name="inputScreen" autocomplete="off" placeholder="推流屏幕范围" class="layui-input">
                                        <div class="layui-form-mid layui-text-em">格式：0,0,800,800（x, y, width, height）<br />含义：从屏幕左上角0,0坐标开始，推流800*800范围内的屏幕</div>
                                    </div>
                                </div>
                                <div class="layui-form-item">
                                    <label class="layui-form-label">推流音频（来自设备）</label>
                                    <div class="layui-input-inline">
                                        <input id="desktopAudioFrom" name="desktopAudioFrom" lay-filter="desktopAudioFrom" type="checkbox" lay-skin="switch" lay-text="是|否">
                                    </div>
                                </div>
                                <div class="layui-form-item" id="desktopAudioDeviceIdItem" style="display:none">
                                    <label class="layui-form-label">音频设备</label>
                                    <div class="layui-input-inline">
                                        <select id="desktopAudioDeviceId" name="desktopAudioDeviceId">
                                            <option value="">请选择</option>
                                            @foreach (var item in Model.AudioDevices)
                                            {
                                                <option value="@item">@item</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="layui-form-item" id="desktopAudioIdItem">
                                    <label class="layui-form-label">推流音频</label>
                                    <div class="layui-input-inline">
                                        <select id="desktopAudioId" name="desktopAudioId" lay-search>
                                            <option value="">请选择</option>
                                            @foreach (var item in Model.Audios)
                                            {
                                                <option value="@item.Key">@item.Value</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="layui-tab-item">内容3</div>
                        <div class="layui-tab-item">内容4</div>
                    </div>
                </div>

                <blockquote class="layui-elem-quote layui-quote-nm" style="margin-top: 10px;display:none">
                    解析结果：
                    <div class="layui-upload-list"></div>
                </blockquote>
            </div>
        </div>

        <div class="layui-card">
            <div class="layui-card-header layui-card-header-custum">
                高级模式
                <div class="layui-form layui-form-custum">
                    <input type="checkbox" name="advanceModel" id="advanceModel" lay-filter="advanceModel" lay-skin="switch" lay-text="开启|关闭" @(Model.PushSetting.Model == ConfigModel.Normal ? "" : "checked")>
                </div>
            </div>
            <div class="layui-card-body" id="advanceModelBody" style="@(Model.PushSetting.Model == ConfigModel.Normal ? "display:none" : "")">
                <div class="layui-collapse" lay-accordion>
                    <div class="layui-colla-item">
                        <div class="layui-colla-title">填写说明</div>
                        <div class="layui-colla-content layui-show">
                            高级模式直接填写ffmpeg推流命令。<br />
                            1. 命令必须以ffmpeg开头，以{URL}结尾。其中{URL}会自动替换为获取到的直播间推流地址；<br />
                            2. 可以使用“//”进行行注释；<br />
                            3. 素材库中的素材，可以直接粘贴到命令中，程序会自动解析。<br />
                            4. 所有可用的输入视频设备：
                            <code>
                                @(Model.VideoDevices?.Any() != true ? "无" : string.Join("、", Model.VideoDevices))
                            </code>
                            ，音频设备：
                            <code>
                                @(Model.AudioDevices?.Any() != true ? "无" : string.Join("、", Model.AudioDevices))
                            </code>
                            <br />
                            示例：
                            <br />
                            <code>ffmpeg -f dshow -video_size 1280x720 -i video="@(Model.VideoDevices?.Any() != true ? "你的摄像头名称" : Model.VideoDevices[0])" -vcodec libx264 -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 5000k -an -preset:v ultrafast -tune:v zerolatency -f flv {URL}</code>
                            <br />
                            使用1280x720的分辨率，推流摄像头设备“HD Pro Webcam C920”到B站直播，编码方式为H264、帧数30。
                        </div>
                    </div>
                </div>
                <pre id="ffmpegCommand" class="layui-code" contenteditable="true" style="outline:none;height:350px;">@Html.Raw(Model.PushSetting.FFmpegCommand)</pre>
            </div>
        </div>

        <div class="layui-card">
            <div class="layui-card-header layui-card-header-custum">不间断直播设置</div>
            <div class="layui-card-body" pad15>
                <div class="layui-form" lay-filter="">
                    <div class="layui-form-item">
                        <label class="layui-form-label">是否开启不间断直播</label>
                        <div class="layui-input-inline">
                            <input type="radio" name="isAutoRetry" lay-filter="isAutoRetry" value="1" title="是" @(Model.PushSetting.IsAutoRetry ? "checked" : "")>
                            <input type="radio" name="isAutoRetry" lay-filter="isAutoRetry" value="0" title="否" @(Model.PushSetting.IsAutoRetry ? "" : "checked")>
                            <div class="layui-form-mid layui-word-aux">当直播推流异常终止后，是否自动重新开启推流。</div>
                        </div>
                    </div>
                    <div class="layui-form-item" id="retrySet" style="@(Model.PushSetting.IsAutoRetry ? "" : "display:none")">
                        <label class="layui-form-label">重试间隔时间</label>
                        <div class="layui-input-inline">
                            <input type="number" name="retryInterval" lay-affix="number" placeholder="单位：秒" value="@Model.PushSetting.RetryInterval" step="10" min="30" max="300" class="layui-input">
                            <div class="layui-form-mid layui-word-aux">单位：秒，不能小于30秒。</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>
<div class="layui-btn-container footer-container">
    <div class="layui-form" lay-filter="">
        <div class="layui-input-block" style="margin-left:30px;margin-top:8px">
            <button type="button" class="layui-btn" lay-filter="submit_live_setting" lay-submit>保存设置</button>
            <button type="button" class="layui-btn layui-bg-orange" lay-filter="submit_start_live" lay-submit id="submit_start_live" style="display:none">开始直播</button>
            <button type="button" class="layui-btn layui-bg-red" lay-filter="submit_stop_live" lay-submit id="submit_stop_live" style="display:none">停止直播</button>
        </div>
    </div>
</div>



@section Styles {
    <style>
        .layui-form-label {
            width: 150px;
        }

        .layui-card-header-custum {
            display: flex;
            align-items: center;
            justify-content: start;
            height: 50px;
            font-size: 16px;
        }

        .layui-form-custum {
            display: inline-block;
            margin-left: 15px;
            margin-top: -8px;
        }

        .footer-container {
            position: fixed;
            bottom: 0px;
            left: 0px;
            right: 0px;
            width: 100%;
            height: 55px;
            background-color: rgba(90, 90, 90, 0.2);
        }

        .layui-form-item .layui-input-inline {
            width: 250px;
        }
    </style>
}

@section Scripts {
    <script>
        layui.config({
            base: '@Url.Content("~/layuiadmin/")' // 静态资源所在路径
        }).use(['form', 'code', 'layer', 'jquery', 'element'], function () {
            $ = layui.jquery;
            var layer = layui.layer,
                element = layui.element,
                layer = layui.layer,
                form = layui.form;

            // 执行渲染
            var codeInst = layui.code({
                elem: '#ffmpegCommand',
                title: '命令编辑器',
                height: '300px',
                ln: false,
                header: true,
            });

            function init() {
                var resolution = "@Model.PushSetting.OutputResolution";
                if (resolution) {
                    $("#outputResolution").val(resolution);
                }
                var custumOutputParams = "@Model.PushSetting.CustumOutputParams";
                if (custumOutputParams) {
                    $('#custumOutputParams').val(custumOutputParams);
                }
                var inputType = "@((int)Model.PushSetting.InputType)";
                switch (inputType) {
                    case "1": {
                        var videoId = "@(Model.PushSetting.VideoId > 0 ? Model.PushSetting.VideoId : "")";
                        if (videoId) {
                            $('#videoId').val(videoId);
                        }
                        var audioId = "@(Model.PushSetting.AudioId > 0 ? Model.PushSetting.AudioId : "")";
                        if (audioId) {
                            $('#audioId').val(audioId);
                        }
                        var isMute = "@Model.PushSetting.IsMute.ToString().ToLower()";
                        if (isMute == "true") {
                            $("input[name='isMute']").attr("checked", true);
                        }
                    }
                    case "2": {
                        var inputScreen = "@Model.PushSetting.InputScreen";
                        $("#inputScreen").val(inputScreen);
                        var isFromFile = "@((Model.PushSetting.InputAudioSource == InputAudioSource.File).ToString().ToLower())";
                        if (isFromFile == "true") {
                            $('#desktopAudioDeviceIdItem').hide();
                            $('#desktopAudioIdItem').show();
                            $("#desktopAudioId").val("@Model.PushSetting.AudioId");
                            $("input[name='desktopAudioFrom']").attr("checked", false);
                        } else {
                            $('#desktopAudioDeviceIdItem').show();
                            $('#desktopAudioIdItem').hide();
                            $('#desktopAudioDeviceId').val("@Html.Raw(Model.PushSetting.AudioDevice)");
                            $("input[name='desktopAudioFrom']").attr("checked", true);
                        }
                    }
                }
                element.tabChange('input_type_tab', inputType);
                form.render();
            }

            function getFFMpegCommandCode() {
                let doc = new DOMParser().parseFromString($("#ffmpegCommand").html(), 'text/html');
                let divs = doc.querySelectorAll('.layui-code-line-content');
                let code = "";
                for (var i = 0; i < divs.length; i++) {
                    if (i == divs.length - 1) {
                        code += divs[i].textContent;
                    }
                    else {
                        code += divs[i].textContent + "\r\n";
                    }
                }
                return code;
            }

            form.on('radio(isAutoRetry)', function (data) {
                if (data.value == 1) {
                    $('#retrySet').show();
                } else {
                    $('#retrySet').hide();
                }
            });

            form.on('switch(easyModel)', function (data) {
                if (this.checked) {
                    $('#easyModelBody').show();
                    $('#advanceModelBody').hide();
                    $("#advanceModel").prop("checked", false);
                } else {
                    $('#easyModelBody').hide();
                    $('#advanceModelBody').show();
                    $("#advanceModel").prop("checked", true);
                }
                form.render();
            });


            form.on('switch(advanceModel)', function (data) {
                if (this.checked) {
                    $('#easyModelBody').hide();
                    $('#advanceModelBody').show();
                    $("#easyModel").prop("checked", false);
                } else {
                    $('#easyModelBody').show();
                    $('#advanceModelBody').hide();
                    $("#easyModel").prop("checked", true);
                }
                form.render();
            });

            form.on('switch(desktopAudioFrom)', function (data) {
                if (this.checked) {
                    $('#desktopAudioDeviceIdItem').show();
                    $('#desktopAudioIdItem').hide();
                    $("#desktopAudioId").val("");
                } else {
                    $('#desktopAudioDeviceIdItem').hide();
                    $('#desktopAudioIdItem').show();
                    $('#desktopAudioDeviceId').val("");
                }
                form.render();
            });

            function save(obj) {
                var loadIndex = layer.load(2, {
                    timeout: 300000
                });
                $.ajax({
                    type: "post",
                    url: "@Url.Action("Update", "Push")",
                    cache: false,
                    data: JSON.stringify(obj),
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (data) {
                        layer.close(loadIndex);
                        if (!data) {
                            layer.msg("保存失败，返回参数为空", { icon: 5 });
                            return;
                        }
                        if (data.code < 0) {
                            layer.msg(data.message, { icon: 5 });
                            return;
                        }
                        if (data.code == 1) {
                            layer.confirm('保存成功。当前正在直播中，是否重新推流？', {
                                btn: ['是', '否']
                            }, function () {
                                var loadIndex = layer.load(2, {
                                    timeout: 300000
                                });
                                $.ajax({
                                    type: "post",
                                    url: "@Url.Action("ReStart", "Push")",
                                    cache: false,
                                    data: null,
                                    contentType: 'application/json',
                                    dataType: 'json',
                                    success: function (data) {
                                        layer.close(loadIndex);
                                        if (!data) {
                                            layer.msg("重新推流失败，返回参数为空", { icon: 5 });
                                            return;
                                        }
                                        if (data.code != 0) {
                                            layer.msg(data.message, { icon: 5 });
                                            return;
                                        }
                                        layer.msg('重新推流成功', { icon: 1 });
                                    },
                                    error: function (data) {
                                        layer.close(loadIndex);
                                        layer.msg("重新推流失败，未知错误", { icon: 5 });
                                        console.log(data);
                                    }
                                });
                            }, function () {
                                layer.closeAll();
                            });
                            return;
                        }
                        layer.msg('保存成功', { icon: 1 });
                    },
                    error: function (data) {
                        layer.close(loadIndex);
                        layer.msg("保存失败，未知错误", { icon: 5 });
                        console.log(data);
                    }
                });
            }

            function safeParseInt(numStr) {
                let num = parseInt(numStr, 10);
                if (!Number.isNaN(num) && Number.isSafeInteger(num)) {
                    return num;
                } else {
                    return 0;
                }
            }

            form.on('submit(submit_live_setting)', function (data) {
                var model = $("#easyModel").prop("checked") ? 1 : ($("#advanceModel").prop("checked") ? 2 : 0)
                var isAutoRetry = $('input[name="isAutoRetry"]:checked').val() == 1;
                var retryInterval = safeParseInt($('input[name="retryInterval"]').val());
                if (model == 1) {
                    var tabIndex = $('#input_type_tab .layui-this').attr('lay-id');
                    if (!tabIndex) {
                        layer.msg("未知的推流类型", { icon: 5 });
                        return false;
                    }
                    tabIndex = safeParseInt(tabIndex);
                    if (tabIndex <= 0) {
                        layer.msg("未知的推流类型", { icon: 5 });
                        return false;
                    }
                    var inputTypeParams = { inputType: tabIndex };
                    var baseOutputParams = form.val('base_output_params_form');
                    var obj = null;

                    switch (tabIndex) {
                        case 1:
                            var inputType1Params = form.val('input_type_1');
                            obj = Object.assign({}, inputTypeParams, baseOutputParams, inputType1Params);
                            obj.isMute = obj.isMute == "on" ? true : false;
                            obj.videoId = safeParseInt(obj.videoId);
                            obj.audioId = safeParseInt(obj.audioId);
                            break;
                        case 2:
                            var inputType1Params = form.val('input_type_2');
                            obj = Object.assign({}, inputTypeParams, baseOutputParams, inputType1Params);
                            obj.desktopAudioFrom = obj.desktopAudioFrom == "on" ? true : false;
                            obj.desktopAudioId = safeParseInt(obj.desktopAudioId);
                            break;
                        default:
                            break;
                    }

                    obj.isAutoRetry = isAutoRetry;
                    obj.retryInterval = retryInterval;
                    obj.model = model;
                    save(obj);
                }
                else if (model == 2) {
                    var obj = {
                        isAutoRetry: isAutoRetry,
                        retryInterval: retryInterval,
                        model: model,
                        ffmpegCommand: getFFMpegCommandCode(),
                    };
                    save(obj);
                }
                else {
                    layer.msg("未知的配置类型", { icon: 5 });
                }
                return false;
            });

            form.on('submit(submit_start_live)', function (data) {
                var loadIndex = layer.load(2, {
                    timeout: 300000
                });
                $.ajax({
                    type: "post",
                    url: "@Url.Action("Start", "Push")",
                    cache: false,
                    data: null,
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (data) {
                        layer.close(loadIndex);
                        if (!data) {
                            layer.msg("开启推流失败，返回参数为空", { icon: 5 });
                            return;
                        }
                        if (data.code != 0) {
                            layer.msg(data.message, { icon: 5 });
                            return;
                        }
                        layer.msg('开启推流成功', { icon: 1 });
                    },
                    error: function (data) {
                        layer.close(loadIndex);
                        layer.msg("开启推流失败，未知错误", { icon: 5 });
                        console.log(data);
                    }
                });
                return false;
            });

            form.on('submit(submit_stop_live)', function (data) {
                var loadIndex = layer.load(2, {
                    timeout: 300000
                });
                $.ajax({
                    type: "post",
                    url: "@Url.Action("Stop", "Push")",
                    cache: false,
                    data: null,
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (data) {
                        layer.close(loadIndex);
                        if (!data) {
                            layer.msg("停止推流失败，返回参数为空", { icon: 5 });
                            return;
                        }
                        if (data.code != 0) {
                            layer.msg(data.message, { icon: 5 });
                            return;
                        }
                        layer.msg('停止推流成功', { icon: 1 });
                    },
                    error: function (data) {
                        layer.close(loadIndex);
                        layer.msg("停止推流失败，未知错误", { icon: 5 });
                        console.log(data);
                    }
                });
                return false;
            });

            init();
        });

        function update() {
            $.ajax({
                type: "get",
                url: "@Url.Action("Status", "Push")",
                cache: false,
                dataType: 'json', // 返回对象
                success: function (data) {
                    if (!data) {
                        console.log("返回参数为空！");
                    }
                    if (data.data.status != 2) {
                        //显示停止按钮
                        $('#submit_start_live').hide();
                        $('#submit_stop_live').show();
                    }
                    else {
                        //显示按钮
                        $('#submit_start_live').show();
                        $('#submit_stop_live').hide();
                    }
                },
                error: function (data) {
                    console.log(data);
                }
            });
        }

        setInterval(update, 500);
    </script>
}
