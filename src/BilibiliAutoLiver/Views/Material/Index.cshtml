@model MaterialIndexPageViewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "素材管理";
}

<div class="layui-card">
    <div class="layui-form layui-card-header layuiadmin-card-header-auto">
        <div class="layui-form-item">
            <div class="layui-inline">
                <label class="layui-form-label">文件名</label>
                <div class="layui-input-block">
                    <input type="text" name="fileName" placeholder="请输入" autocomplete="off" class="layui-input">
                </div>
            </div>
            <div class="layui-inline">
                <label class="layui-form-label">类型</label>
                <div class="layui-input-block">
                    <select name="fileType">
                        <option value=""></option>
                        @foreach (var fileTypeItem in Model.FileTypes)
                        {
                            <option value="@fileTypeItem.Key">@fileTypeItem.Value</option>
                        }
                    </select>
                </div>
            </div>
            <div class="layui-inline">
                <button class="layui-btn layuiadmin-btn-admin" lay-submit lay-filter="material-table-list-search">
                    <i class="layui-icon layui-icon-search layuiadmin-button-btn"></i>
                </button>
            </div>
        </div>
    </div>

    <div class="layui-card-body">
        <div style="padding-bottom: 10px;">
            <button class="layui-btn layui-bg-red layuiadmin-btn-admin" data-type="batchdel">删除所选</button>
            <button class="layui-btn layuiadmin-btn-admin" data-type="add">上传素材</button>
        </div>

        <table id="material-table-list" lay-filter="material-table-list"></table>
        <script type="text/html" id="table-content-op">
            <a class="layui-btn layui-btn layui-btn-xs" lay-event="copy"><i class="layui-icon layui-icon-file-b"></i>复制</a>
            <a class="layui-btn layui-btn-normal layui-btn-xs" lay-event="download"><i class="layui-icon layui-icon-download-circle"></i>下载</a>
            <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del"><i class="layui-icon layui-icon-delete"></i>删除</a>
        </script>
    </div>
</div>


<div class="layui-card" id="upload-page" style="display:none">
    <div class="layui-card-body">
        <div class="layui-upload">
            <button type="button" class="layui-btn layui-btn-normal" id="test-upload-testList">选择文件</button>
            <button type="button" class="layui-btn" id="test-upload-testListAction" style="margin-left:5px">开始上传</button>
            <button type="button" class="layui-btn layui-bg-orange" id="test-upload-cleanListAction" style="margin-left:5px">清空列表</button>
            <div class="layui-upload-list">
                <table class="layui-table">
                    <colgroup>
                        <col>
                        <col width="150">
                        <col width="150">
                        <col width="150">
                        <col width="150">
                    </colgroup>
                    <thead>
                        <tr>
                            <th>文件名</th>
                            <th>大小</th>
                            <th>上传进度</th>
                            <th>操作</th>
                            <th>备注</th>
                        </tr>
                    </thead>
                    <tbody id="test-upload-demoList"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@section Styles {

}

@section Scripts {
    <script>
        layui.config({
            base: '@Url.Content("~/layuiadmin/")' // 静态资源所在路径
        }).use(['form', 'layer', 'jquery', 'table', 'upload', 'element'], function () {
            $ = layui.jquery;
            var layer = layui.layer
                , form = layui.form
                , table = layui.table
                , upload = layui.upload
                , element = layui.element;
            var files = {};
            //多文件列表示例
            var uploadListIns = upload.render({
                elem: '#test-upload-testList'
                , elemList: $('#test-upload-demoList') //列表元素对象
                , url: '@Url.Action("Upload", "Material")'
                , accept: 'file'
                , multiple: true
                , number: 30
                , auto: false
                , bindAction: '#test-upload-testListAction'
                , choose: function (obj) {
                    var that = this;
                    files = this.files = obj.pushFile(); //将每次选择的文件追加到文件队列
                    //读取本地文件
                    obj.preview(function (index, file, result) {
                        var tr = $(['<tr id="upload-' + index + '">'
                            , '<td>' + file.name + '</td>'
                            , '<td>' + (file.size / 1014).toFixed(1) + 'kb</td>'
                            , '<td><div class="layui-progress" lay-filter="progress-demo-' + index + '"><div class="layui-progress-bar" lay-percent=""></div></div></td>'
                            , '<td>'
                            , '<button class="layui-btn layui-btn-xs demo-reload layui-hide">重传</button>'
                            , '<button class="layui-btn layui-btn-xs layui-btn-danger demo-delete">删除</button>'
                            , '</td>'
                            , '<td></td>'
                            , '</tr>'].join(''));

                        //单个重传
                        tr.find('.demo-reload').on('click', function () {
                            obj.upload(index, file);
                        });

                        //删除
                        tr.find('.demo-delete').on('click', function () {
                            delete files[index]; //删除对应的文件
                            tr.remove();
                            uploadListIns.config.elem.next()[0].value = ''; //清空 input file 值，以免删除后出现同名文件不可选
                        });

                        that.elemList.append(tr);
                        element.render('progress'); //渲染新加的进度条组件
                    });
                }
                , done: function (res, index, upload) { //成功的回调
                    if (res.code != 0) {
                        this.error(index, upload, res.message);
                        return;
                    }
                    var that = this;
                    var tr = that.elemList.find('tr#upload-' + index)
                        , tds = tr.children();
                    tds.eq(3).html(''); //清空操作
                    tds.eq(4).html("<span style=\"color:green;\">上传成功</span>"); //清空备注
                    delete this.files[index]; //删除文件队列已经上传成功的文件
                    return;
                }
                , allDone: function (obj) { //多文件上传完毕后的状态回调
                    console.log(obj)
                }
                , error: function (index, upload, msg) { //错误回调
                    var that = this;
                    var tr = that.elemList.find('tr#upload-' + index)
                        , tds = tr.children();
                    tds.eq(3).find('.demo-reload').removeClass('layui-hide'); //显示重传
                    if (msg) {
                        tds.eq(4).html("<span style=\"color:red;\">失败：</span>" + msg)
                    }
                }
                , progress: function (n, elem, e, index) {
                    element.progress('progress-demo-' + index, n + '%'); //执行进度条。n 即为返回的进度百分比
                }
            });

            $("#test-upload-cleanListAction").click(function () {
                $("#test-upload-demoList tr").each(function () {
                    var trId = $(this).attr("id");
                    if (trId) {
                        trId = trId.replace("upload-", "");
                        if (files) {
                            delete files[trId];
                        }
                    }
                    $(this).remove();
                });
                uploadListIns.config.elem.next()[0].value = '';
            });

            table.render({
                elem: '#material-table-list'
                , url: '@Url.Action("GetList", "Material")'
                , method: 'get'
                , parseData: function (res) { //res 即为原始返回的数据
                    if (res.code != 0) {
                        layer.msg('加载数据失败。', { icon: 5 });
                        return {
                            "code": res.code,
                            "msg": res.message,
                            "count": 0,
                            "data": null
                        }
                    }
                    return {
                        "code": res.code, //解析接口状态
                        "msg": res.message, //解析提示文本
                        "data": res.data.data, //解析数据列表
                        "count": res.data.dataCount
                    };
                }
                , cellMinWidth: 100
                //, height: 'full-100'
                , initSort: {
                    field: 'id'
                    , type: 'desc'
                }
                , cols: [[
                    { type: 'checkbox', fixed: 'left' }
                    , { field: 'id', title: '编号', width: 60, sort: true, }
                    , { field: 'name', title: '文件名', sort: true, }
                    , { field: 'size', title: '大小', sort: true, }
                    , { field: 'fileType', title: '类型', sort: true }
                    , { field: 'path', title: '相对路径', sort: true, }
                    , { field: 'createdTime', title: '创建时间', sort: true, }
                    , { title: '操作', width: 220, align: 'center', fixed: 'right', toolbar: '#table-content-op' }
                ]]
                , page: true
                , limit: 15
                , limits: [10, 15, 30, 40, 50, 60, 70, 80, 90]
                , autoSort: false
                , title: '全部文件'
                , done: function (res, curr, count) {

                }
            });

            const copyText = async (val) => {
                if (navigator.clipboard && navigator.permissions) {
                    await navigator.clipboard.writeText(val)
                } else {
                    const textArea = document.createElement('textArea')
                    textArea.value = val
                    textArea.style.width = 0
                    textArea.style.position = 'fixed'
                    textArea.style.left = '-999px'
                    textArea.style.top = '10px'
                    textArea.setAttribute('readonly', 'readonly')
                    document.body.appendChild(textArea)

                    textArea.select()
                    document.execCommand('copy')
                    document.body.removeChild(textArea)
                }
            }

            //操作按钮
            table.on('tool(material-table-list)', function (obj) {
                var data = obj.data;
                var name = obj.data.name;
                var id = obj.data.id;
                var path = obj.data.path;

                if (name == null || name == "" || id == null || id == "") {
                    layer.msg('啊？这条数据走丢了。', { icon: 5 });
                    return;
                }

                switch (obj.event) {
                    case "del":
                        layer.confirm('确认删除素材【' + name + '】么？', function (index) {
                            var indexLoad = layer.msg('删除中...', {
                                icon: 16,
                                shade: 0.01,
                                time: 300000
                            });

                            $.post('@Url.Action("Delete", "Material")', {
                                ids: [id]
                            }, function (data) {
                                layer.closeAll();
                                if (data.code == 0) {
                                    layer.msg('删除成功', { icon: 6 });
                                    //执行重载
                                    table.reload('material-table-list');
                                } else {
                                    layer.alert('删除失败。错误：' + data.message, { icon: 5 });
                                }
                            });
                        });
                        break;
                    case "copy":
                        copyText(path);
                        layer.msg('已将所选文件相对路径复制到剪切板', { icon: 6 });
                        break;
                    case "download":
                        var url = '@Url.Action("Download", "Material")?id=' + id;
                        const a = document.createElement('a')
                        a.href = url
                        a.style.display = 'none'
                        document.body.appendChild(a)
                        a.click()
                        document.body.removeChild(a)
                        break;
                }
            });

            //事件-搜索
            form.on('submit(material-table-list-search)', function (data) {
                var field = data.field;

                //执行重载
                table.reload('material-table-list', {
                    where: field
                });
            });

            //监听排序事件
            table.on('sort(material-table-list)', function (obj) { //注：sort 是工具条事件名，test 是 table 原始容器的属性 lay-filter="对应的值"
                //尽管我们的 table 自带排序功能，但并没有请求服务端。
                //有些时候，你可能需要根据当前排序的字段，重新向服务端发送请求，从而实现服务端排序，如：
                table.reload('material-table-list', {
                    initSort: obj   //记录初始排序，如果不设的话，将无法标记表头的排序状态。
                    , where: {         //请求参数（注意：这里面的参数可任意定义，并非下面固定的格式）
                        field: obj.field //排序字段
                        , order: obj.type //排序方式
                    }
                });
            });

            //监听搜索
            form.on('submit(material-table-list)', function (data) {
                var field = data.field;

                //执行重载
                table.reload('material-table-list', {
                    where: field
                });
            });

            //事件
            var active = {
                batchdel: function () {
                    var checkStatus = table.checkStatus('material-table-list')
                        , checkData = checkStatus.data; //得到选中的数据

                    if (checkData.length === 0) {
                        layer.msg('请选择要删除的素材');
                        return;
                    }
                    var arr = [];
                    for (var i in checkData) {
                        arr.push(checkData[i].id);
                    }
                    layer.confirm('确认删除所选素材么？', function (index) {
                        var indexLoad = layer.msg('删除中...', {
                            icon: 16,
                            shade: 0.01,
                            time: 300000
                        });

                        $.post('@Url.Action("Delete", "Material")', {
                            ids: arr
                        }, function (data) {
                            layer.closeAll();
                            if (data.code == 0) {
                                layer.msg('删除成功', { icon: 6 });
                                //执行重载
                                table.reload('material-table-list');
                            } else {
                                layer.alert('删除失败。错误：' + data.message, { icon: 5 });
                            }
                        });
                    });
                }
                , add: function () {
                    layer.open({
                        type: 1,
                        area: ['800px', '410px'], // 宽高
                        content: $('#upload-page'),
                        end: function () {
                            $('#upload-page').hide();
                            table.reload('material-table-list');
                        }
                    });
                }
            }

            $('.layui-btn.layuiadmin-btn-admin').on('click', function () {
                var type = $(this).data('type');
                active[type] ? active[type].call(this) : '';
            });
        });
    </script>
}
